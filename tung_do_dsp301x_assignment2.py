# -*- coding: utf-8 -*-
"""Tung_Do_DSP301x_assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SspFPyLp4bZnaxEciINGNrSpBscfZfAl

#Task 1

CHo phép người dùng nhập tên của một tệp. Cố gắng mở tệp được cung cấp để truy cập đọc. Nếu tệp tồn tại, bạn có thể in ra một thông báo xác nhận. Nếu tệp không tồn tại, bạn nên cho người dùng biết rằng không thể tìm thấy tệp và nhắc lại họ.

Sử dụng try/except để thực hiện việc này
"""

while True:
  try:
    path = input("Nhap duong dan den file: ")
    if path:
      with open(path, "r") as file:
        print("Successfully opened {}".format(path))
        data = file.read().split('\n')
      break
  except FileNotFoundError:
    print("{} not found".format(path))
    continue

"""#Task 2

Thực hiện như sau:

1. Báo cáo tổng số dòng dữ liệu được lưu trữ trong tệp.
2. Phân tích từng dòng và đảm bảo rằng nó là "hợp lệ".
  * Một dòng hợp lệ chứa danh sách 26 giá trị được phân tách bằng dấu phẩy
  * N# cho một học sinh là mục đầu tiên trên dòng. Nó phải chứa ký tự “N” theo sau là 8 ký tự số.
3. Nếu một dòng dữ liệu không hợp lệ, bạn nên báo cáo cho người dùng bằng cách in ra một thông báo lỗi. Bạn cũng nên đếm tổng số dòng dữ liệu hợp lệ trong tệp.

"""

print("****ANALYZING****")
line_count = len(data)
invalid_line = 0
valid_answers = []
for line in data:
  line_elements = line.split(",")
  if (len(line_elements) != 26) or (line_elements[0][0] != "N") or (not line_elements[0][1:].isnumeric()) or (len(line_elements[0])!=9): # check for invalid condition at each line
    invalid_line += 1
    if (len(line_elements) != 26):
      print("Invalid line of data: does not contain exactly 26 values:")
    if (line_elements[0][0] != "N") or (not line_elements[0][1:].isnumeric()) or (len(line_elements[0])!=9):
      print("Invalid line of data: N# is invalid")
    print(line)
  else:
    valid_answers.append(line) #collect valid answer for further processing
if not invalid_line:
    print("No errors found!")

print("****REPORT****") 
print("Total valid lines of data: {}".format(line_count - invalid_line))
print("Total invalid lines of data: {}".format(invalid_line))

"""#Task 3

Chấm điểm các bài thi cho một phần nhất định. Kỳ thi gồm 25 câu hỏi, trắc nghiệm. Đây là một chuỗi đại diện cho các câu trả lời:
answer_key = "B,A,D,D,C,B,D,A,C,C,D,B,A,B,A,C,B,D,A,C,A,A,B,D,D"

Tính điểm cho mỗi dòng dữ liệu hợp lệ. Điểm có thể được tính như sau:
* +4 điểm cho mỗi câu trả lời đúng
* 0 điểm cho mỗi câu trả lời bị bỏ qua
* -1 điểm cho mỗi câu trả lời sai

Tính toán các thống kê sau cho toàn bộ lớp:
* Điểm trung bình
* Điểm cao nhất
* Điểm thấp nhất
* Miền giá trị của điểm (cao nhất trừ thấp nhất)
* Giá trị trung vị 
"""

import numpy as np

students = []
answers = []
scores = []
for line in valid_answers: #iterate to separate student number from the answers
  elements = line.split(",")
  students.append(elements[0])
  answers.append(elements[1:])

answer_keys = "B,A,D,D,C,B,D,A,C,C,D,B,A,B,A,C,B,D,A,C,A,A,B,D,D".split(",")

for student, answer in zip(students, answers): #iterate through each pair of student and answer
  score = 0
  for choice, key in zip(answer, answer_keys): #iterate through each pair of choice and key to calculate the final score for each student
    if choice == "":
      score+=0
    elif choice == key:
      score +=4
    elif choice != key:
      score -= 1
  scores.append(score)
  


score_arr = np.array(scores)

mean_score = score_arr.mean()
max_score = score_arr.max()
min_score = score_arr.min()
range = max_score - min_score
median_score = np.median(score_arr)

print('Mean (average) score:', mean_score)
print('Highest score:', max_score)
print('Lowest score:', min_score)
print('Range of scores:', range)
print('Median score:', median_score)

"""#Task 4

Cuối cùng, yêu cầu chương trình của bạn tạo một tệp “kết quả” chứa các kết quả chi tiết cho từng học sinh trong lớp của bạn. Mỗi dòng của tệp này phải chứa số ID của học sinh, dấu phẩy và sau đó là điểm của họ. Bạn nên đặt tên tệp này dựa trên tên tệp gốc được cung cấp — ví dụ: nếu người dùng muốn phân tích “class1.txt”, bạn nên lưu trữ kết quả trong tệp có tên “class1_grades.txt”.

"""

path_elements = path.split('.')
result_path = path_elements[0] + '_grades.' + path_elements[1] #create path of the output file by inserting additional text
with open(result_path, 'w+') as writefile:
  for student, score in zip(students,scores): #iterrate through the pairs of student and score and write it into the output file
    writefile.write('{},{}\n'.format(student, score))

with open(result_path, 'r') as file:
  print(file.read())

